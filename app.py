import streamlit as st
import pandas as pd
import numpy as np
import json
import tempfile
import os
from datetime import datetime
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.lib.units import mm
import io

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –ø–∞—Ä–æ–ø–µ—Ä–µ–≥—Ä–µ–≤–∞—Ç–µ–ª–µ–π",
    page_icon="üìä",
    layout="wide"
)

# –£—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–ª–ª–∞: {–±–∞–ª–ª: (k, b)}
NOMOGRAM_EQUATIONS = {
    1: (-36.54, 722.7),
    2: (-33.22, 717.1),
    3: (-36.54, 741.7),
    4: (-36.54, 752.7),
    5: (-36.54, 763.7),
    6: (-39.84, 788.2)
}

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –†–ê–°–ß–ï–¢–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def calculate_temperature_from_structure(score, hours):
    """–†–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –±–∞–ª–ª—É –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –Ω–∞—Ä–∞–±–æ—Ç–∫–µ"""
    if hours <= 0 or score not in NOMOGRAM_EQUATIONS:
        return None
    
    x = np.log10(hours)
    k, b = NOMOGRAM_EQUATIONS[score]
    temp = k * x + b
    
    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ 5
    return round(temp / 5) * 5

def calculate_saturation_temperature_interpolated(pressure):
    """–†–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞—Å—ã—â–µ–Ω–∏—è –ø–æ –¥–∞–≤–ª–µ–Ω–∏—é"""
    table = [
        {'p': 2, 't': 212.42},
        {'p': 4, 't': 250.4},
        {'p': 6, 't': 275.64},
        {'p': 8, 't': 295.06},
        {'p': 10, 't': 311.06},
        {'p': 12, 't': 324.75},
        {'p': 14, 't': 336.63},
        {'p': 16, 't': 347.01},
        {'p': 18, 't': 356.16},
        {'p': 20, 't': 364.29},
        {'p': 22.064, 't': 373.95},
        {'p': 24, 't': 380.97},
        {'p': 26, 't': 387.4},
    ]
    
    p = float(pressure)
    if p < 2 or p > 26:
        return None
    
    for i in range(len(table) - 1):
        if table[i]['p'] <= p <= table[i + 1]['p']:
            p1, t1 = table[i]['p'], table[i]['t']
            p2, t2 = table[i + 1]['p'], table[i + 1]['t']
            return t1 + ((p - p1) / (p2 - p1)) * (t2 - t1)
    
    return None

def calculate_min_allowed_thickness(outer_diameter):
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ç–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏"""
    d = float(outer_diameter)
    if d < 38:
        return 1.45
    elif d <= 51:
        return 1.6
    elif d <= 70:
        return 2.0
    elif d <= 90:
        return 2.4
    elif d <= 108:
        return 2.8
    else:
        return 3.2

def calculate_single_sample(sample):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞"""
    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        p = float(sample.get('pressure', 0))
        s_n = float(sample.get('nominalThickness', 0))
        D_n = float(sample.get('outerDiameter', 0))
        s_min = float(sample.get('minThickness', 0))
        s_max = float(sample.get('maxThickness', 0))
        d_max = float(sample.get('maxInnerDiameter', 0))
        tau_e = float(sample.get('operatingHours', 0))
        steel_type = sample.get('steelType', '12H1MF')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not all([p, s_n, D_n, s_min, s_max, d_max, tau_e]):
            return {
                'T_s_eq': 0,
                'finalResource': 0,
                'resultMessage': "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
                'sigma_0': 0,
                'sigma_k': 0,
                'sigma_sr': 0,
                'corrosionRate': 0,
                'finalThickness': 0
            }
        
        # –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–æ–∑–∏–æ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        v_korr = 0
        if sample.get('corrosionRateInput'):
            v_korr = float(sample['corrosionRateInput']) * 1e-5
        else:
            v_korr = (s_max - s_min) / tau_e if s_max > s_min else (s_n - s_min) / tau_e
        
        # –†–∞—Å—á–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π
        is_tolerance_exceeded = s_max > 1.1 * s_n
        sigma_0 = (p / 2) * (D_n / (s_max if is_tolerance_exceeded else s_n) - 1)
        sigma_k = (p / 2) * (d_max / s_min + 1)
        sigma_sr = (sigma_0 + sigma_k) / 2
        
        # –†–∞—Å—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞—Ä–∫–∏ —Å—Ç–∞–ª–∏
        T_s_eq = 0
        final_resource = 0
        final_thickness = 0
        result_message = ""
        
        if steel_type == "DI59":
            # –†–∞—Å—á–µ—Ç –¥–ª—è —Å—Ç–∞–ª–∏ –î–ò59
            G = float(sample.get('grainNumber', 7))
            C_sigma = float(sample.get('sigmaPhase', 0))
            
            k_G = 1.66 * (G ** -0.33)
            T_s_eq = (3.4 * sigma_sr - 24341) / (np.log((k_G * C_sigma) / np.sqrt(tau_e)) - 23.4)
            
            # –†–∞—Å—á–µ—Ç —Ä–µ—Å—É—Ä—Å–∞ –ø–æ –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏
            A = (21360 - 2400 * np.log10(sigma_sr) - 4.5 * sigma_sr) / T_s_eq + 2 * np.log10(T_s_eq) - 19.56
            tau_r_A = 10 ** A
            P_isp = tau_e / tau_r_A
            P_ost = 0.8 - P_isp
            
            if P_ost <= 0:
                final_resource = 0
                result_message = "–†–µ—Å—É—Ä—Å –∏—Å—á–µ—Ä–ø–∞–Ω"
            else:
                # –ò—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                tau_prognoz = 0.5 * tau_r_A
                converged = False
                
                for _ in range(100):
                    s_min2 = s_min - v_korr * tau_prognoz
                    if s_min2 <= 0:
                        break
                    
                    sigma_k2 = (p / 2) * (d_max / s_min2 + 1)
                    sigma_sr2 = (sigma_k + sigma_k2) / 2
                    
                    B = (21360 - 2400 * np.log10(sigma_k2) - 4.5 * sigma_k2) / T_s_eq + 2 * np.log10(T_s_eq) - 19.56
                    tau_r_B = 10 ** B
                    tau_prognoz1 = tau_r_B * P_ost
                    
                    diff = tau_prognoz - tau_r_B
                    if 0 <= diff <= 240 and tau_prognoz < tau_r_A and (s_min - s_min2) > 0:
                        converged = True
                        final_resource = tau_prognoz1
                        final_thickness = s_min2
                        result_message = f"–†–µ—Å—É—Ä—Å –ø–æ –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏: {int(final_resource)} —á"
                        break
                    
                    if diff > 240:
                        tau_prognoz = tau_prognoz * 0.9 if diff > 1000 else tau_prognoz - 100
                    elif diff < 0:
                        tau_prognoz = tau_prognoz * 1.1 if abs(diff) > 1000 else tau_prognoz + 100
                
                if not converged:
                    # –†–∞—Å—á–µ—Ç –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏
                    s_min_dop = calculate_min_allowed_thickness(D_n)
                    final_resource = (s_min - s_min_dop) / v_korr
                    final_thickness = s_min_dop
                    result_message = f"–†–µ—Å—É—Ä—Å –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏: {int(final_resource)} —á"
        
        elif steel_type == "12X18H12T":
            # –†–∞—Å—á–µ—Ç –¥–ª—è —Å—Ç–∞–ª–∏ 12–•18–ù12–¢
            C_sigma = float(sample.get('sigmaPhase', 0))
            T_s_eq = 847 * (C_sigma / np.sqrt(tau_e)) ** 0.0647 + 273
            
            A = (30942 - 3762 * np.log10(sigma_sr) - 16.8 * sigma_sr) / T_s_eq + 2 * np.log10(T_s_eq) - 26.3
            tau_r_A = 10 ** A
            P_isp = tau_e / tau_r_A
            P_ost = 0.8 - P_isp
            
            if P_ost <= 0:
                final_resource = 0
                result_message = "–†–µ—Å—É—Ä—Å –∏—Å—á–µ—Ä–ø–∞–Ω"
            else:
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–∞–∫ –¥–ª—è –î–ò59
                s_min_dop = calculate_min_allowed_thickness(D_n)
                final_resource = (s_min - s_min_dop) / v_korr
                final_thickness = s_min_dop
                result_message = f"–†–µ—Å—É—Ä—Å –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏: {int(final_resource)} —á"
        
        elif steel_type == "12H1MF":
            # –†–∞—Å—á–µ—Ç –¥–ª—è —Å—Ç–∞–ª–∏ 12–•1–ú–§
            T_s_eq_values = []
            
            # –†–∞—Å—á–µ—Ç –ø–æ –º–æ–ª–∏–±–¥–µ–Ω—É
            if sample.get('C_Mo_k') and sample.get('C_Mo_m'):
                C_Mo_k = float(sample['C_Mo_k'])
                C_Mo_m = float(sample['C_Mo_m'])
                a = (C_Mo_k / C_Mo_m - 7.34e-4 * sigma_0) * (tau_e ** -0.291)
                T_s_eq_mo = -31655 * a * a + 4720 * a + 503 + 273.15
                T_s_eq_values.append(T_s_eq_mo)
            
            # –†–∞—Å—á–µ—Ç –ø–æ –±–∞–ª–ª—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if sample.get('structural_ball') and sample.get('t_structural_ball'):
                T_s_eq_struct = float(sample['t_structural_ball']) + 273.15
                T_s_eq_values.append(T_s_eq_struct)
            
            # –†–∞—Å—á–µ—Ç –ø–æ –æ–∫—Å–∏–¥–Ω–æ–π –ø–ª–µ–Ω–∫–µ
            if sample.get('h_oxide_thickness') and sample.get('t_oxide_thickness'):
                T_s_eq_oxide = float(sample['t_oxide_thickness']) + 273.15
                T_s_eq_values.append(T_s_eq_oxide)
            
            T_s_eq = max(T_s_eq_values) if T_s_eq_values else 0
            
            # –†–∞—Å—á–µ—Ç —Ä–µ—Å—É—Ä—Å–∞
            A = (24956 - 2400 * np.log10(sigma_sr) - 10.9 * sigma_sr) / T_s_eq + 2 * np.log10(T_s_eq) - 24.88
            tau_r_A = 10 ** A
            P_isp = tau_e / tau_r_A
            P_ost = 0.8 - P_isp
            
            if P_ost <= 0:
                final_resource = 0
                result_message = "–†–µ—Å—É—Ä—Å –∏—Å—á–µ—Ä–ø–∞–Ω"
            else:
                s_min_dop = calculate_min_allowed_thickness(D_n)
                final_resource = (s_min - s_min_dop) / v_korr
                final_thickness = s_min_dop
                result_message = f"–†–µ—Å—É—Ä—Å –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏: {int(final_resource)} —á"
        
        elif steel_type == "20_12H1MF_HEAT_RESIST":
            # –†–∞—Å—á–µ—Ç –¥–ª—è —Å—Ç–∞–ª–∏ 20/12–•1–ú–§ (–∂–∞—Ä–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å)
            sigma_02_t = float(sample.get('sigma_02_t', 0))
            
            # –†–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
            if sample.get('calculate_t_exploit_auto', False):
                t_s = calculate_saturation_temperature_interpolated(p)
                t_exploit = t_s + 60 if t_s else 0
            else:
                t_exploit = float(sample.get('t_exploit_manual', 0))
            
            T_s_eq = t_exploit + 273.15  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ö–µ–ª—å–≤–∏–Ω—ã
            
            # –†–∞—Å—á–µ—Ç –ø–æ –∂–∞—Ä–æ—Å—Ç–æ–π–∫–æ—Å—Ç–∏
            s_p = (p * D_n) / (2 * (sigma_02_t / 1.5) + p)
            s_min_dop = calculate_min_allowed_thickness(D_n)
            
            if s_p < s_min_dop:
                final_resource = (s_min - s_min_dop) / v_korr
                final_thickness = s_min_dop
                result_message = f"–†–µ—Å—É—Ä—Å –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏: {int(final_resource)} —á"
            else:
                final_resource = (s_min - s_p) / v_korr
                final_thickness = s_p
                result_message = f"–†–µ—Å—É—Ä—Å –ø–æ –∂–∞—Ä–æ—Å—Ç–æ–π–∫–æ—Å—Ç–∏: {int(final_resource)} —á"
        
        else:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç–∞–ª–∏
            final_resource = 0
            result_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–ª–∏"
        
        return {
            'T_s_eq': round(T_s_eq - 273.15) if T_s_eq > 0 else 0,  # –û–±—Ä–∞—Ç–Ω–æ –≤ –¶–µ–ª—å—Å–∏–∏
            'finalResource': int(final_resource),
            'resultMessage': result_message,
            'sigma_0': round(sigma_0, 2),
            'sigma_k': round(sigma_k, 2),
            'sigma_sr': round(sigma_sr, 2),
            'corrosionRate': round(v_korr * 100000, 2),  # –º–º/100000 —á
            'finalThickness': round(final_thickness, 2),
            'steelType': steel_type
        }
        
    except Exception as e:
        return {
            'T_s_eq': 0,
            'finalResource': 0,
            'resultMessage': f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}",
            'sigma_0': 0,
            'sigma_k': 0,
            'sigma_sr': 0,
            'corrosionRate': 0,
            'finalThickness': 0,
            'steelType': sample.get('steelType', '')
        }

def perform_calculations(samples):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–∑—Ü–æ–≤"""
    results = []
    for sample in samples:
        result = calculate_single_sample(sample)
        results.append(result)
    return results

# =============================================================================
# STREAMLIT –ò–ù–¢–ï–†–§–ï–ô–°
# =============================================================================

def initialize_session_state():
    if 'project_data' not in st.session_state:
        st.session_state.project_data = None
    if 'calculation_results' not in st.session_state:
        st.session_state.calculation_results = None
    if 'samples_df' not in st.session_state:
        st.session_state.samples_df = pd.DataFrame()

def main():
    st.title("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –ø–∞—Ä–æ–ø–µ—Ä–µ–≥—Ä–µ–≤–∞—Ç–µ–ª–µ–π")
    
    initialize_session_state()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    menu = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        ["–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Excel", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", 
         "–ê–≤—Ç–æ—Ä–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä", "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç—ã", "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤"]
    )
    
    if menu == "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
        show_project_creation()
    elif menu == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Excel":
        show_excel_import()
    elif menu == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ":
        show_data_editor()
    elif menu == "–ê–≤—Ç–æ—Ä–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä":
        show_temperature_calculation()
    elif menu == "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç—ã":
        show_calculations()
    elif menu == "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤":
        show_reports()

def show_project_creation():
    st.header("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        project_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", value="–ò—Ä–∏–∫–ª–∏–Ω—Å–∫–∞—è –ì–†–≠–° –≠–ë ‚Ññ 3")
        num_samples = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤", min_value=1, value=20)
    
    with col2:
        approver_name = st.text_input("–£—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π", value="–ü—á–µ–ª–∏–Ω—Ü–µ–≤ –ê.–í.")
        approver_position = st.text_input("–î–æ–ª–∂–Ω–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ", 
                                        value="–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º")
    
    if st.button("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"):
        samples = []
        for i in range(num_samples):
            sample = {
                "id": i + 1,
                "objectName": f"–û–±—Ä–∞–∑–µ—Ü {i+1}",
                "steelType": "12H1MF",
                "pressure": "",
                "nominalThickness": "",
                "outerDiameter": "",
                "minThickness": "",
                "maxThickness": "",
                "maxInnerDiameter": "",
                "grainNumber": "",
                "sigmaPhase": "",
                "C_Mo_k": "",
                "C_Mo_m": "",
                "structural_ball": "",
                "h_oxide_thickness": "",
                "t_structural_ball": "",
                "t_oxide_thickness": "",
                "sigma_02_t": "",
                "t_exploit_manual": "",
                "calculate_t_exploit_auto": False,
                "operatingHours": "",
                "corrosionRateInput": "",
                "typeOfSuperheater": "SHPP"
            }
            samples.append(sample)
        
        st.session_state.project_data = {
            "projectName": project_name,
            "samples": samples,
            "approverName": approver_name,
            "approverPosition": approver_position,
            "experts": [{"position": "", "fullName": ""}]
        }
        
        st.session_state.samples_df = pd.DataFrame(samples)
        st.success(f"–ü—Ä–æ–µ–∫—Ç '{project_name}' —Å–æ–∑–¥–∞–Ω —Å {num_samples} –æ–±—Ä–∞–∑—Ü–∞–º–∏")

def show_excel_import():
    st.header("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel")
    
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª", type=['xlsx', 'xls'])
    
    if uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
            st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
            st.dataframe(df.head())
            
            if st.button("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                samples = []
                for idx, row in df.iterrows():
                    sample = {
                        "id": idx + 1,
                        "objectName": str(row.get('objectName', f"–û–±—Ä–∞–∑–µ—Ü {idx+1}")),
                        "steelType": str(row.get('steelType', '12H1MF')),
                        "pressure": str(row.get('pressure', '')),
                        "nominalThickness": str(row.get('nominalThickness', '')),
                        "outerDiameter": str(row.get('outerDiameter', '')),
                        "minThickness": str(row.get('minThickness', '')),
                        "maxThickness": str(row.get('maxThickness', '')),
                        "maxInnerDiameter": str(row.get('maxInnerDiameter', '')),
                        "grainNumber": str(row.get('grainNumber', '')),
                        "sigmaPhase": str(row.get('sigmaPhase', '')),
                        "C_Mo_k": str(row.get('C_Mo_k', '')),
                        "C_Mo_m": str(row.get('C_Mo_m', '')),
                        "structural_ball": str(row.get('structural_ball', '')),
                        "h_oxide_thickness": str(row.get('h_oxide_thickness', '')),
                        "t_structural_ball": str(row.get('t_structural_ball', '')),
                        "t_oxide_thickness": str(row.get('t_oxide_thickness', '')),
                        "sigma_02_t": str(row.get('sigma_02_t', '')),
                        "t_exploit_manual": str(row.get('t_exploit_manual', '')),
                        "calculate_t_exploit_auto": bool(row.get('calculate_t_exploit_auto', False)),
                        "operatingHours": str(row.get('operatingHours', '')),
                        "corrosionRateInput": str(row.get('corrosionRateInput', '')),
                        "typeOfSuperheater": str(row.get('typeOfSuperheater', 'SHPP'))
                    }
                    samples.append(sample)
                
                st.session_state.project_data = {
                    "projectName": "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
                    "samples": samples,
                    "approverName": "–ü—á–µ–ª–∏–Ω—Ü–µ–≤ –ê.–í.",
                    "approverPosition": "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º",
                    "experts": [{"position": "", "fullName": ""}]
                }
                
                st.session_state.samples_df = pd.DataFrame(samples)
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

def show_data_editor():
    if st.session_state.project_data is None:
        st.warning("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    st.header("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤")
    
    if st.session_state.samples_df.empty:
        st.session_state.samples_df = pd.DataFrame(st.session_state.project_data['samples'])
    
    edited_df = st.data_editor(
        st.session_state.samples_df,
        use_container_width=True,
        num_rows="dynamic",
        column_config={
            "id": st.column_config.NumberColumn("ID", disabled=True),
            "objectName": "–û–±—ä–µ–∫—Ç",
            "steelType": st.column_config.SelectboxColumn("–°—Ç–∞–ª—å", 
                options=["12H1MF", "12X18H12T", "DI59", "20_12H1MF_HEAT_RESIST"]),
            "pressure": "–î–∞–≤–ª–µ–Ω–∏–µ, –ú–ü–∞",
            "nominalThickness": "s‚Çô, –º–º",
            "outerDiameter": "D‚Çô, –º–º", 
            "minThickness": "s‚Çò·µ¢‚Çô, –º–º",
            "maxThickness": "s‚Çò‚Çê‚Çì, –º–º",
            "maxInnerDiameter": "d‚Çò‚Çê‚Çì, –º–º",
            "structural_ball": st.column_config.NumberColumn("–ë–∞–ª–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", min_value=1, max_value=6, step=1),
            "operatingHours": "–ù–∞—Ä–∞–±–æ—Ç–∫–∞, —á",
            "typeOfSuperheater": st.column_config.SelectboxColumn("–¢–∏–ø –ü–ü", options=["SHPP", "KPP"])
        },
        hide_index=True
    )
    
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
        st.session_state.samples_df = edited_df
        st.session_state.project_data['samples'] = edited_df.to_dict('records')
        st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def show_temperature_calculation():
    if st.session_state.project_data is None:
        st.warning("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    st.header("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –ø–æ –±–∞–ª–ª—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    
    st.info("""
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–ª–∞ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –Ω–∞—Ä–∞–±–æ—Ç–∫–∏
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–º–æ–≥—Ä–∞–º–º—ã. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∫—Ä–∞—Ç–Ω–æ–≥–æ 5.
    """)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–æ–≥—Ä–∞–º–º—É
    st.subheader("–ù–æ–º–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
    fig = plot_nomogram()
    st.pyplot(fig)
    
    # –ê–≤—Ç–æ—Ä–∞—Å—á–µ—Ç –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ —Å –±–∞–ª–ª–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    df = st.session_state.samples_df.copy()
    
    valid_samples = df[
        (df['structural_ball'].notna()) & 
        (df['structural_ball'] != "") &
        (df['operatingHours'].notna()) & 
        (df['operatingHours'] != "") &
        (pd.to_numeric(df['operatingHours'], errors='coerce') > 0)
    ].copy()
    
    if not valid_samples.empty:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ—Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
        
        valid_samples['calculated_temperature'] = valid_samples.apply(
            lambda row: calculate_temperature_from_structure(
                int(float(row['structural_ball'])), 
                float(row['operatingHours'])
            ), 
            axis=1
        )
        
        result_display = valid_samples[['objectName', 'structural_ball', 'operatingHours', 'calculated_temperature']]
        st.dataframe(result_display)
        
        if st.button("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è t_structural_ball —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º–∏"):
            for idx, row in valid_samples.iterrows():
                original_idx = df[df['objectName'] == row['objectName']].index[0]
                df.at[original_idx, 't_structural_ball'] = str(row['calculated_temperature'])
            
            st.session_state.samples_df = df
            st.session_state.project_data['samples'] = df.to_dict('records')
            st.success("–ü–æ–ª—è t_structural_ball —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
            
            st.subheader("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            st.dataframe(df[['objectName', 'structural_ball', 'operatingHours', 't_structural_ball']])
    else:
        st.warning("–ù–µ—Ç –æ–±—Ä–∞–∑—Ü–æ–≤ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –±–∞–ª–ª–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –Ω–∞—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä.")

def plot_nomogram():
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–æ–º–æ–≥—Ä–∞–º–º—ã"""
    fig, ax = plt.subplots(figsize=(10, 6))
    
    x_log_min = 4.0
    x_log_max = 5.7
    x_vals = np.linspace(x_log_min, x_log_max, 100)
    
    for score in range(1, 7):
        k, b = NOMOGRAM_EQUATIONS[score]
        y_vals = k * x_vals + b
        ax.plot(10**x_vals, y_vals, label=f'–ë–∞–ª–ª {score}', linewidth=2)
    
    ax.set_xlabel('–ù–∞—Ä–∞–±–æ—Ç–∫–∞ œÑ_–∑, —á')
    ax.set_ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ t_—ç–∫—Å, ¬∞C')
    ax.set_title('–ù–æ–º–æ–≥—Ä–∞–º–º–∞: –†–∞—Å—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –±–∞–ª–ª—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã')
    ax.grid(True, which="both", ls="--")
    ax.set_xscale('log')
    ax.set_xlim(10**4, 5*10**5)
    ax.set_ylim(510, 630)
    ax.legend()
    
    return fig

def show_calculations():
    if st.session_state.project_data is None:
        st.warning("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    st.header("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞")
    
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–∑—Ü–æ–≤"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ä–∞—Å—á–µ—Ç—ã..."):
            try:
                results = perform_calculations(st.session_state.project_data['samples'])
                st.session_state.calculation_results = results
                st.success("–†–∞—Å—á–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.subheader("–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                summary_data = []
                for i, (sample, result) in enumerate(zip(st.session_state.project_data['samples'], results)):
                    summary_data.append({
                        '‚Ññ': i + 1,
                        '–û–±—Ä–∞–∑–µ—Ü': sample['objectName'],
                        '–°—Ç–∞–ª—å': sample['steelType'],
                        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C': result['T_s_eq'],
                        '–†–µ—Å—É—Ä—Å, —á': result['finalResource'],
                        '–°–æ–æ–±—â–µ–Ω–∏–µ': result['resultMessage']
                    })
                
                summary_df = pd.DataFrame(summary_data)
                st.dataframe(summary_df)
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π
                st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤")
                detail_data = []
                for i, (sample, result) in enumerate(zip(st.session_state.project_data['samples'], results)):
                    detail_data.append({
                        '‚Ññ': i + 1,
                        '–û–±—Ä–∞–∑–µ—Ü': sample['objectName'],
                        'œÉ‚ÇÄ, –ú–ü–∞': result['sigma_0'],
                        'œÉ‚Çñ, –ú–ü–∞': result['sigma_k'],
                        'œÉ—Å—Ä, –ú–ü–∞': result['sigma_sr'],
                        'v–∫–æ—Ä, –º–º/10‚Åµ—á': result['corrosionRate'],
                        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C': result['T_s_eq'],
                        '–†–µ—Å—É—Ä—Å, —á': result['finalResource']
                    })
                
                detail_df = pd.DataFrame(detail_data)
                st.dataframe(detail_df)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤: {str(e)}")

def show_reports():
    if st.session_state.calculation_results is None:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç—ã")
        return
    
    st.header("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤")
    
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞")
    
    col1, col2 = st.columns(2)
    with col1:
        report_date = st.date_input("–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞", value=datetime.now())
        approver_name = st.text_input("–£—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π", 
                                    value=st.session_state.project_data.get('approverName', '–ü—á–µ–ª–∏–Ω—Ü–µ–≤ –ê.–í.'))
    with col2:
        expert_name = st.text_input("–≠–∫—Å–ø–µ—Ä—Ç", value="")
        approver_position = st.text_input("–î–æ–ª–∂–Ω–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ",
                                        value=st.session_state.project_data.get('approverPosition', ''))
    
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
    
    preview_data = []
    for i, (sample, result) in enumerate(zip(st.session_state.project_data['samples'], 
                                           st.session_state.calculation_results)):
        preview_data.append({
            '‚Ññ': i + 1,
            '–û–±—ä–µ–∫—Ç': sample.get('objectName', ''),
            '–°—Ç–∞–ª—å': sample.get('steelType', ''),
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C': result.get('T_s_eq', ''),
            '–†–µ—Å—É—Ä—Å, —á': result.get('finalResource', ''),
            '–°–æ–æ–±—â–µ–Ω–∏–µ': result.get('resultMessage', '')
        })
    
    st.dataframe(pd.DataFrame(preview_data))
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."):
            try:
                pdf_bytes = generate_pdf_report(
                    st.session_state.project_data,
                    st.session_state.calculation_results,
                    approver_name,
                    approver_position,
                    report_date.strftime("%d.%m.%Y")
                )
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç",
                    data=pdf_bytes,
                    file_name=f"–û—Ç—á–µ—Ç_{st.session_state.project_data['projectName']}.pdf",
                    mime="application/pdf"
                )
                
                st.success("PDF –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

def generate_pdf_report(project_data, results, approver_name, approver_position, report_date):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title_style = styles['Heading1']
    title = Paragraph(f"–û–¢–ß–ï–¢ –ü–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú –û–¶–ï–ù–ö–ò –û–°–¢–ê–¢–û–ß–ù–û–ì–û –†–ï–°–£–†–°–ê", title_style)
    story.append(title)
    story.append(Spacer(1, 12))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    project_info = [
        ["–û–±—ä–µ–∫—Ç:", project_data['projectName']],
        ["–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞:", report_date],
        ["–£—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π:", f"{approver_position} {approver_name}"]
    ]
    
    project_table = Table(project_info, colWidths=[60*mm, 100*mm])
    project_table.setStyle(TableStyle([
        ('FONT', (0, 0), (-1, -1), 'Helvetica', 10),
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
    ]))
    story.append(project_table)
    story.append(Spacer(1, 20))
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_data = [['‚Ññ', '–û–±—ä–µ–∫—Ç', '–°—Ç–∞–ª—å', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C', '–†–µ—Å—É—Ä—Å, —á', '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ']]
    
    for i, (sample, result) in enumerate(zip(project_data['samples'], results)):
        results_data.append([
            i + 1,
            sample.get('objectName', ''),
            sample.get('steelType', ''),
            result.get('T_s_eq', ''),
            result.get('finalResource', ''),
            result.get('resultMessage', '')[:50] + '...' if len(result.get('resultMessage', '')) > 50 else result.get('resultMessage', '')
        ])
    
    results_table = Table(results_data, colWidths=[15*mm, 40*mm, 25*mm, 25*mm, 25*mm, 40*mm])
    results_table.setStyle(TableStyle([
        ('FONT', (0, 0), (-1, 0), 'Helvetica-Bold', 9),
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
        ('BOX', (0, 0), (-1, -1), 0.25, colors.black),
        ('FONT', (0, 1), (-1, -1), 'Helvetica', 8),
    ]))
    story.append(results_table)
    
    doc.build(story)
    buffer.seek(0)
    return buffer.getvalue()

if __name__ == "__main__":
    main()